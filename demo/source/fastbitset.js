"use strict";

const KDBush = require('../source/kdbrush');

const memoryBuffer = new WebAssembly.Memory({ initial: 64, maximum: 1024 }); // Khởi tạo với kích thước nhỏ hơn
const HEAPU32 = new Uint32Array(memoryBuffer.buffer);

let wasmReady = false;

const wasmCache = {
    instance: null,
    isReady: false,
};

const loadWasm = async () => {
    if (wasmCache.isReady) {
        return wasmCache.instance;
    }
    const base64Wasm = 'AGFzbQEAAAABoQEVYAF/AX9gAn9/AX9gAAF/YAF/AGACf38AYAN/f38AYAN/f38Bf2AAAGAEf39/fwBgBn9/f39/fwBgBX9/f39/AGAEf39/fwF/YAN/fn8BfmAFf39/f38Bf2AGf39/f39/AX9gDX9/f39/f39/f39/f38AYAl/f39/f39/f38AYAR/f35/AX5gBX9/f35+AGAHf39/f39/fwBgBH9+f38BfwLYBBQDZW52Fl9lbWJpbmRfcmVnaXN0ZXJfY2xhc3MADwNlbnYiX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19jb25zdHJ1Y3RvcgAJA2VudgtfX2N4YV90aHJvdwAFA2Vudh9fZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2Z1bmN0aW9uABADZW52FV9lbWJpbmRfcmVnaXN0ZXJfdm9pZAAEA2VudhVfZW1iaW5kX3JlZ2lzdGVyX2Jvb2wACANlbnYYX2VtYmluZF9yZWdpc3Rlcl9pbnRlZ2VyAAoDZW52Fl9lbWJpbmRfcmVnaXN0ZXJfZmxvYXQABQNlbnYbX2VtYmluZF9yZWdpc3Rlcl9zdGRfc3RyaW5nAAQDZW52HF9lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmcABQNlbnYWX2VtYmluZF9yZWdpc3Rlcl9lbXZhbAADA2VudhxfZW1iaW5kX3JlZ2lzdGVyX21lbW9yeV92aWV3AAUDZW52FV9lbXNjcmlwdGVuX21lbWNweV9qcwAFA2VudhZlbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwAAADZW52CV9hYm9ydF9qcwAHFndhc2lfc25hcHNob3RfcHJldmlldzEIZmRfY2xvc2UAABZ3YXNpX3NuYXBzaG90X3ByZXZpZXcxCGZkX3dyaXRlAAsDZW52DV9fYXNzZXJ0X2ZhaWwACANlbnYXX2VtYmluZF9yZWdpc3Rlcl9iaWdpbnQAExZ3YXNpX3NuYXBzaG90X3ByZXZpZXcxB2ZkX3NlZWsADQO7ArkCBwcABwEHAAICAwICAgICAgICAwQEBAEEAwQEBAQBAQAABQAABAAAAAICAgEDAwMAAAUEBQAAAAQEBQAFBAQDAAAAAAAAAAACBQYFBAEAAAAABQELBQQABAAGBQAAAwEGAAUABgABCwAEBAMAAAUAAAIBAwEBAAACBgABAQEAAAcBAQAABggICAUACgEBBQEAAAAABgEHBAAEAAUAAAIAAAACBgAAAgAAAAIEAAACAAIFAQEGAAYAAAABAQAAAgAAAgEGAQQBBQUHAAMHBwYGAAACAgAABgMBBgQBAAAHAwEBAQQDBwcAAQABAAAAAAYMDAMDAgcAAwACAAEAAwMDAwMDBgYABgsEDg0OCAgIBgYBAQoICgoJCQAAAwAAAwAAAwAAAAAAAwAAAwADAgcCAgIAAwACEQ0SFAQFAXABLi4FBwEBggKAgAIGFwR/AUGAgAQLfwFBAAt/AUEAC38BQQALB9cCEAZtZW1vcnkCABFfX3dhc21fY2FsbF9jdG9ycwAUGV9faW5kaXJlY3RfZnVuY3Rpb25fdGFibGUBAA1fX2dldFR5cGVOYW1lAN0BBmZmbHVzaADFAgZtYWxsb2MA6AEEZnJlZQDqARVlbXNjcmlwdGVuX3N0YWNrX2luaXQAwQIZZW1zY3JpcHRlbl9zdGFja19nZXRfZnJlZQDCAhllbXNjcmlwdGVuX3N0YWNrX2dldF9iYXNlAMMCGGVtc2NyaXB0ZW5fc3RhY2tfZ2V0X2VuZADEAhlfZW1zY3JpcHRlbl9zdGFja19yZXN0b3JlAMYCF19lbXNjcmlwdGVuX3N0YWNrX2FsbG9jAMcCHGVtc2NyaXB0ZW5fc3RhY2tfZ2V0X2N1cnJlbnQAyAIVX19jeGFfaXNfcG9pbnRlcl90eXBlAKwCDGR5bkNhbGxfamlqaQDKAglWAQBBAQstFxodJScpKiwuV64BtgG+Ac4BtgKtAt8BgAKCAoQCjwKSApACkQKWApMCmQKrAqkCoAKUAqoCqAKhApUCowKxArICtAK1Aq4CrwK6ArsCvQIKjJUCuQILABDBAhDcARDgAQsQAQF/QfSZBCEAIAAQFhoPC0IBB38jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDCADKAIMIQRBASEFIAQgBRAYGkEQIQYgAyAGaiEHIAckACAEDwuSCQJVfwp+IwAhAEGwAiEBIAAgAWshAiACJABB2wAhAyACIANqIQQgAiAENgJwQaKABCEFIAIgBTYCbBAZQQIhBiACIAY2AmgQGyEHIAIgBzYCZBAcIQggAiAINgJgQQMhCSACIAk2AlwQHiEKEB8hCxAgIQwQISENIAIoAmghDiACIA42ApgCECIhDyACKAJoIRAgAigCZCERIAIgETYCoAIQIyESIAIoAmQhEyACKAJgIRQgAiAUNgKcAhAjIRUgAigCYCEWIAIoAmwhFyACKAJcIRggAiAYNgKkAhAkIRkgAigCXCEaIAogCyAMIA0gDyAQIBIgEyAVIBYgFyAZIBoQAEHbACEbIAIgG2ohHCACIBw2AnQgAigCdCEdIAIgHTYCrAJBBCEeIAIgHjYCqAIgAigCrAIhHyACKAKoAiEgICAQJkEAISEgAiAhNgJUQQUhIiACICI2AlAgAikCUCFVIAIgVTcDmAEgAigCmAEhIyACKAKcASEkIAIgHzYCtAFBlIIEISUgAiAlNgKwASACICQ2AqwBIAIgIzYCqAEgAigCtAEhJiACKAKwASEnIAIoAqgBISggAigCrAEhKSACICk2AqQBIAIgKDYCoAEgAikCoAEhViACIFY3AyBBICEqIAIgKmohKyAnICsQKCACICE2AkxBBiEsIAIgLDYCSCACKQJIIVcgAiBXNwN4IAIoAnghLSACKAJ8IS4gAiAmNgKUAUGBggQhLyACIC82ApABIAIgLjYCjAEgAiAtNgKIASACKAKUASEwIAIoApABITEgAigCiAEhMiACKAKMASEzIAIgMzYChAEgAiAyNgKAASACKQKAASFYIAIgWDcDGEEYITQgAiA0aiE1IDEgNRAoIAIgITYCREEHITYgAiA2NgJAIAIpAkAhWSACIFk3A7gBIAIoArgBITcgAigCvAEhOCACIDA2AtQBQbyABCE5IAIgOTYC0AEgAiA4NgLMASACIDc2AsgBIAIoAtQBITogAigC0AEhOyACKALIASE8IAIoAswBIT0gAiA9NgLEASACIDw2AsABIAIpAsABIVogAiBaNwMQQRAhPiACID5qIT8gOyA/ECsgAiAhNgI8QQghQCACIEA2AjggAikCOCFbIAIgWzcD2AEgAigC2AEhQSACKALcASFCIAIgOjYC9AFB1YAEIUMgAiBDNgLwASACIEI2AuwBIAIgQTYC6AEgAigC9AEhRCACKALwASFFIAIoAugBIUYgAigC7AEhRyACIEc2AuQBIAIgRjYC4AEgAikC4AEhXCACIFw3AwhBCCFIIAIgSGohSSBFIEkQLSACICE2AjRBCSFKIAIgSjYCMCACKQIwIV0gAiBdNwP4ASAC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ABCKAgsgAQsGACAAJAALEgECfyMAIABrQXBxIgEkACABCwQAIwALDQAgASACIAMgABEMAAslAQF+IAAgASACrSADrUIghoQgBBDJAiEFIAVCIIinEL8CIAWnCxwAIAAgASACIAOnIANCIIinIASnIARCIIinEBILEwAgACABpyABQiCIpyACIAMQEwsLgRoCAEGAgAQL1BhhcnJheQB1bnNpZ25lZCBzaG9ydAB1bnNpZ25lZCBpbnQARmFzdEJpdFNldABmbG9hdAB1aW50NjRfdABoYXMAdmVjdG9yAHVuc2lnbmVkIGNoYXIAY2xlYXIAc3lzdGVtL2xpYi9saWJjeHhhYmkvc3JjL3ByaXZhdGVfdHlwZWluZm8uY3BwAHN0ZDo6ZXhjZXB0aW9uAGJvb2wAYmFkX2FycmF5X25ld19sZW5ndGgAY2FuX2NhdGNoAHVuc2lnbmVkIGxvbmcAc3RkOjp3c3RyaW5nAHN0ZDo6c3RyaW5nAHN0ZDo6dTE2c3RyaW5nAHN0ZDo6dTMyc3RyaW5nAHJlbW92ZQBkb3VibGUAdm9pZABhZGQAc3RkOjpiYWRfYWxsb2MAZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8c2hvcnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGludD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8ZmxvYXQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVpbnQ4X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDhfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDE2X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDE2X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVpbnQ2NF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ2NF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50MzJfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50MzJfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8Y2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgY2hhcj4Ac3RkOjpiYXNpY19zdHJpbmc8dW5zaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8c2lnbmVkIGNoYXI+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGxvbmc+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGxvbmc+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGRvdWJsZT4AYWRqdXN0ZWRQdHIgJiYgImNhdGNoaW5nIGEgY2xhc3Mgd2l0aG91dCBhbiBvYmplY3Q/IgAxMEZhc3RCaXRTZXQAqAoBAP8DAQBQMTBGYXN0Qml0U2V0AAAALAsBABQEAQAAAAAADAQBAFBLMTBGYXN0Qml0U2V0AAAsCwEANAQBAAEAAAAMBAEAcHAAdgB2cAAkBAEA5AkBACQEAQBQCgEAdnBwaQAAAAD8CQEARAQBAFAKAQBpcHBpAAAAAOQJAQAkBAEAdnBwAMAEAQBEBAEATlN0M19fMjZ2ZWN0b3JJak5TXzlhbGxvY2F0b3JJakVFRUUAqAoBAJwEAQBwcHAATlN0M19fMjEyYmFzaWNfc3RyaW5nSWNOU18xMWNoYXJfdHJhaXRzSWNFRU5TXzlhbGxvY2F0b3JJY0VFRUUAAKgKAQDMBAEATlN0M19fMjEyYmFzaWNfc3RyaW5nSWhOU18xMWNoYXJfdHJhaXRzSWhFRU5TXzlhbGxvY2F0b3JJaEVFRUUAAKgKAQAUBQEATlN0M19fMjEyYmFzaWNfc3RyaW5nSXdOU18xMWNoYXJfdHJhaXRzSXdFRU5TXzlhbGxvY2F0b3JJd0VFRUUAAKgKAQBcBQEATlN0M19fMjEyYmFzaWNfc3RyaW5nSURzTlNfMTFjaGFyX3RyYWl0c0lEc0VFTlNfOWFsbG9jYXRvcklEc0VFRUUAAACoCgEApAUBAE5TdDNfXzIxMmJhc2ljX3N0cmluZ0lEaU5TXzExY2hhcl90cmFpdHNJRGlFRU5TXzlhbGxvY2F0b3JJRGlFRUVFAAAAqAoBAPAFAQBOMTBlbXNjcmlwdGVuM3ZhbEUAAKgKAQA8BgEATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJY0VFAACoCgEAWAYBAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWFFRQAAqAoBAIAGAQBOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0loRUUAAKgKAQCoBgEATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJc0VFAACoCgEA0AYBAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SXRFRQAAqAoBAPgGAQBOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lpRUUAAKgKAQAgBwEATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJakVFAACoCgEASAcBAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWxFRQAAqAoBAHAHAQBOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0ltRUUAAKgKAQCYBwEATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJeEVFAACoCgEAwAcBAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SXlFRQAAqAoBAOgHAQBOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lmRUUAAKgKAQAQCAEATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJZEVFAACoCgEAOAgBAE4xMF9fY3h4YWJpdjExNl9fc2hpbV90eXBlX2luZm9FAAAAANAKAQBgCAEATAwBAE4xMF9fY3h4YWJpdjExN19fY2xhc3NfdHlwZV9pbmZvRQAAANAKAQCQCAEAhAgBAE4xMF9fY3h4YWJpdjExN19fcGJhc2VfdHlwZV9pbmZvRQAAANAKAQDACAEAhAgBAE4xMF9fY3h4YWJpdjExOV9fcG9pbnRlcl90eXBlX2luZm9FANAKAQDwCAEA5AgBAE4xMF9fY3h4YWJpdjEyMF9fZnVuY3Rpb25fdHlwZV9pbmZvRQAAAADQCgEAIAkBAIQIAQBOMTBfX2N4eGFiaXYxMjlfX3BvaW50ZXJfdG9fbWVtYmVyX3R5cGVfaW5mb0UAAADQCgEAVAkBAOQIAQAAAAAA1AkBABUAAAAWAAAAFwAAABgAAAAZAAAATjEwX19jeHhhYml2MTIzX19mdW5kYW1lbnRhbF90eXBlX2luZm9FANAKAQCsCQEAhAgBAHYAAACYCQEA4AkBAERuAACYCQEA7AkBAGIAAACYCQEA+AkBAGMAAACYCQEABAoBAGgAAACYCQEAEAoBAGEAAACYCQEAHAoBAHMAAACYCQEAKAoBAHQAAACYCQEANAoBAGkAAACYCQEAQAoBAGoAAACYCQEATAoBAGwAAACYCQEAWAoBAG0AAACYCQEAZAoBAHgAAACYCQEAcAoBAHkAAACYCQEAfAoBAGYAAACYCQEAiAoBAGQAAACYCQEAlAoBAAAAAAC0CAEAFQAAABoAAAAXAAAAGAAAABsAAAAcAAAAHQAAAB4AAAAAAAAAGAsBABUAAAAfAAAAFwAAABgAAAAbAAAAIAAAACEAAAAiAAAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAANAKAQDwCgEAtAgBAAAAAAAUCQEAFQAAACMAAAAXAAAAGAAAACQAAAAAAAAApAsBABAAAAAlAAAAJgAAAAAAAADMCwEAEAAAACcAAAAoAAAAAAAAAIwLAQAQAAAAKQAAACoAAABTdDlleGNlcHRpb24AAAAAqAoBAHwLAQBTdDliYWRfYWxsb2MAAAAA0AoBAJQLAQCMCwEAU3QyMGJhZF9hcnJheV9uZXdfbGVuZ3RoAAAAANAKAQCwCwEApAsBAAAAAAD8CwEADwAAACsAAAAsAAAAU3QxMWxvZ2ljX2Vycm9yANAKAQDsCwEAjAsBAAAAAAAwDAEADwAAAC0AAAAsAAAAU3QxMmxlbmd0aF9lcnJvcgAAAADQCgEAHAwBAPwLAQBTdDl0eXBlX2luZm8AAAAAqAoBADwMAQAAQdiYBAucASAPAQAAAAAABQAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwAAABQAAAAEDwEAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAwBAA==';

    function base64ToUint8Array(base64) {
        const binaryString = atob(base64);
        const len = binaryString.length;
        const bytes = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
            bytes[i] = binaryString.charCodeAt(i);
        }
        return bytes;
    }

    const wasmBinary = base64ToUint8Array(base64Wasm);
    const wasmModule = await WebAssembly.instantiate(wasmBinary, {
        env: {
            memory: memoryBuffer,
            table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' }),
            emscripten_resize_heap: (size) => {
                const PAGE_SIZE = 65536;
                const newPages = Math.ceil(size / PAGE_SIZE);
                memoryBuffer.grow(newPages);
                return memoryBuffer.buffer.byteLength;
            },
            _embind_register_class: () => { },
            _embind_register_class_constructor: () => { },
            __cxa_throw: () => { },
            _embind_register_class_function: () => { },
            _embind_register_void: () => { },
            _embind_register_value_object: () => { },
            _embind_register_function: () => { },
            _embind_register_integer: () => { },
            _embind_register_float: () => { },
            _embind_register_emval: () => { },
            _embind_register_std_string: () => { },
            _embind_register_std_wstring: () => { },
            _embind_register_bool: () => { },
            _embind_register_enum: () => { },
            _embind_register_enum_value: () => { },
            _embind_register_value_array: () => { },
            _embind_register_std_vector: () => { },
            _embind_register_std_map: () => { },
            _embind_register_std_set: () => { },
            _embind_register_std_pair: () => { },
            _embind_register_std_tuple: () => { },
            _embind_register_smart_ptr: () => { },
            _embind_register_smart_ptr_type: () => { },
            _embind_register_raw_pointer: () => { },
            _embind_register_ref: () => { },
            _embind_register_val: () => { },
            _embind_register_cstring: () => { },
            _embind_register_string: () => { },
            _embind_register_string_buffer: () => { },
            _embind_register_string_view: () => { },
            _embind_register_span: () => { },
            _embind_register_optional: () => { },
            _embind_register_variant: () => { },
            _embind_register_variant_type: () => { },
            _embind_register_any: () => { },
            _embind_register_this: () => { },
            _embind_register_value: () => { },
            _embind_register_exception: () => { },
            _embind_register_error: () => { },
            _embind_register_error_info: () => { },
            _embind_register_emval_method: () => { },
            _embind_register_emval_property: () => { },
            _embind_register_emval_global: () => { },
            _embind_register_emval_module: () => { },
            _embind_register_emval_instance: () => { },
            _embind_register_emval_interface: () => { },
            _embind_register_emval_interface_method: () => { },
            _embind_register_memory_view: () => { },
            _embind_register_shared_ptr: () => { },
            _embind_register_unique_ptr: () => { },
            _embind_register_std_function: () => { },
            _embind_register_std_function_method: () => { },
            _embind_register_std_function_property: () => { },
            _embind_register_std_function_global: () => { },
            _embind_register_std_function_module: () => { },
            _embind_register_std_function_instance: () => { },
            _emscripten_memcpy_js: () => { },
            _emscripten_resize_heap: () => { },
            _emscripten_request_fullscreen_strategy: () => { },
            _emscripten_exit_fullscreen_strategy: () => { },
            _emscripten_exit_pointerlock_strategy: () => { },
            _emscripten_exit_soft_fullscreen_strategy: () => { },
            _emscripten_exit_fullscreen: () => { },
            _emscripten_exit_pointerlock: () => { },
            _emscripten_exit_soft_fullscreen: () => { },
            _emscripten_get_device_pixel_ratio: () => { },
            _emscripten_set_element_css_size: () => { },
            _emscripten_get_element_css_size: () => { },
            _abort_js: () => { },
            __assert_fail: () => { },
            _embind_register_bigint: () => { },
        },
        wasi_snapshot_preview1: {
            emscripten_resize_heap: () => { },
            emscripten_request_fullscreen_strategy: () => { },
            emscripten_exit_fullscreen_strategy: () => { },
            fd_seek: () => { },
            fd_write: () => { },
            fd_close: () => { },
            fd_fdstat_get: () => { },
            fd_fdstat_set_flags: () => { },
            fd_read: () => { },
            proc_exit: () => { },
        }
    });

    wasmCache.instance = wasmModule.instance;
    wasmCache.isReady = true;
    wasmReady = true;
    return wasmCache.instance;
};

loadWasm().catch(err => console.error("WASM loading error: ", err));

class FastBitSet {
    static instanceCache = new Map();

    constructor(iterable) {
        this.words = HEAPU32.subarray(0, 1);
        this.kdbush = new KDBush(1024);
        if (iterable) {
            if (Symbol && Symbol.iterator && iterable[Symbol.iterator] !== undefined) {
                const iterator = iterable[Symbol.iterator]();
                let current = iterator.next();
                while (!current.done) {
                    this.add(current.value);
                    current = iterator.next();
                }
            } else {
                for (let i = 0; i < iterable.length; i++) {
                    this.add(iterable[i]);
                }
            }
        }
    }

    static async getInstance(key, iterable) {
        if (!this.instanceCache.has(key)) {
            await loadWasm();
            const instance = new FastBitSet(iterable);
            this.instanceCache.set(key, instance);
            return instance;
        }
        return this.instanceCache.get(key);
    }

    static fromWords(words) {
        const bitSet = Object.create(FastBitSet.prototype);
        bitSet.words = HEAPU32.subarray(0, words.length);
        bitSet.words.set(words);
        return bitSet;
    }

    add(index, x, y) {
        this.checkWasmReady();
        if (typeof index !== 'number' || index < 0) {
            throw new Error('Index must be a non-negative integer');
        }
        this.resize(index);
        this.words[index >>> 5] |= (1 << index);
        if (x !== undefined && y !== undefined) {
            this.kdbush.add(x, y, index);
        }
    }

    flip(index) {
        this.checkWasmReady();
        if (typeof index !== 'number' || index < 0) {
            throw new Error('Index must be a non-negative integer');
        }
        this.resize(index);
        this.words[index >>> 5] ^= (1 << index);
    }

    clear() {
        this.words = HEAPU32.subarray(0, this.words.length);
        this.kdbush = new KDBush(1024);
    }

    remove(index) {
        this.checkWasmReady();
        if (typeof index !== 'number' || index < 0) {
            throw new Error('Index must be a non-negative integer');
        }
        this.resize(index);
        this.words[index >>> 5] &= ~(1 << index);
        this.kdbush.remove(index);
    }

    isEmpty() {
        return this.words.every(word => word === 0);
    }

    has(index) {
        if (typeof index !== 'number' || index < 0) {
            throw new Error('Index must be a non-negative integer');
        }
        return (this.words[index >>> 5] & (1 << index)) !== 0;
    }

    checkedAdd(index, x, y) {
        this.checkWasmReady();
        if (typeof index !== 'number' || index < 0) {
            throw new Error('Index must be a non-negative integer');
        }
        this.resize(index);
        const word = this.words[index >>> 5];
        const newword = word | (1 << index);
        this.words[index >>> 5] = newword;
        if (x !== undefined && y !== undefined) {
            this.kdbush.add(x, y, index);
        }
        return (newword ^ word) >>> index;
    }

    trim() {
        let nl = this.words.length;
        while (nl > 0 && this.words[nl - 1] === 0) {
            nl--;
        }
        this.words = HEAPU32.subarray(0, nl);
    }

    resize(index) {
        const count = (index + 32) >>> 5;
        if (count > this.words.length) {
            const newWords = HEAPU32.subarray(0, count);
            newWords.set(this.words);
            this.words = newWords;
        }
    }

    hammingWeight(v) {
        this.checkWasmReady();
        let count = 0;
        while (v) {
            v &= v - 1;
            count++;
        }
        return count;
    }

    hammingWeight4(v1, v2, v3, v4) {
        this.checkWasmReady();
        return this.hammingWeight(v1) + this.hammingWeight(v2) + this.hammingWeight(v3) + this.hammingWeight(v4);
    }

    size() {
        this.checkWasmReady();
        let answer = 0;
        for (let i = 0; i < this.words.length; i++) {
            answer += this.hammingWeight(this.words[i]);
        }
        return answer;
    }

    array() {
        this.checkWasmReady();
        const answer = new Array(this.size());
        let pos = 0;
        for (let k = 0; k < this.words.length; ++k) {
            let w = this.words[k];
            while (w != 0) {
                const t = w & -w;
                answer[pos++] = (k << 5) + this.hammingWeight((t - 1) | 0);
                w ^= t;
            }
        }
        return answer;
    }

    forEach(fnc) {
        this.checkWasmReady();
        for (let k = 0; k < this.words.length; ++k) {
            let w = this.words[k];
            while (w != 0) {
                const t = w & -w;
                fnc((k << 5) + this.hammingWeight((t - 1) | 0));
                w ^= t;
            }
        }
    }

    [Symbol.iterator]() {
        let k = 0;
        let w = this.words[0];
        const hw = this.hammingWeight.bind(this);
        const words = this.words;
        return {
            [Symbol.iterator]() {
                return this;
            },
            next() {
                while (k < words.length) {
                    if (w !== 0) {
                        const t = w & -w;
                        const value = (k << 5) + hw((t - 1) | 0);
                        w ^= t;
                        return { done: false, value };
                    } else {
                        k++;
                        if (k < words.length) {
                            w = words[k];
                        }
                    }
                }
                return { done: true, value: undefined };
            },
        };
    }

    clone() {
        this.checkWasmReady();
        const clone = Object.create(FastBitSet.prototype);
        clone.words = HEAPU32.subarray(0, this.words.length);
        clone.words.set(this.words);
        clone.kdbush = this.kdbush.clone();
        return clone;
    }

    intersects(otherbitmap) {
        this.checkWasmReady();
        const newcount = Math.min(this.words.length, otherbitmap.words.length);
        for (let k = 0; k < newcount; ++k) {
            if ((this.words[k] & otherbitmap.words[k]) !== 0) return true;
        }
        return false;
    }

    intersection(otherbitmap) {
        this.checkWasmReady();
        const newcount = Math.min(this.words.length, otherbitmap.words.length);
        for (let k = 0; k < newcount; ++k) {
            this.words[k] &= otherbitmap.words[k];
        }
        for (let k = newcount; k < this.words.length; ++k) {
            this.words[k] = 0;
        }
        return this;
    }

    intersection_size(otherbitmap) {
        this.checkWasmReady();
        const newcount = Math.min(this.words.length, otherbitmap.words.length);
        let answer = 0;
        for (let k = 0; k < newcount; ++k) {
            answer += this.hammingWeight(this.words[k] & otherbitmap.words[k]);
        }
        return answer;
    }

    new_intersection(otherbitmap) {
        this.checkWasmReady();
        const answer = Object.create(FastBitSet.prototype);
        const count = Math.min(this.words.length, otherbitmap.words.length);
        answer.words = HEAPU32.subarray(0, count);
        for (let k = 0; k < count; ++k) {
            answer.words[k] = this.words[k] & otherbitmap.words[k];
        }
        return answer;
    }

    equals(otherbitmap) {
        this.checkWasmReady();
        const mcount = Math.min(this.words.length, otherbitmap.words.length);
        for (let k = 0; k < mcount; ++k) {
            if (this.words[k] !== otherbitmap.words[k]) return false;
        }
        if (this.words.length < otherbitmap.words.length) {
            for (let k = this.words.length; k < otherbitmap.words.length; ++k) {
                if (otherbitmap.words[k] !== 0) return false;
            }
        } else if (otherbitmap.words.length < this.words.length) {
            for (let k = otherbitmap.words.length; k < this.words.length; ++k) {
                if (this.words[k] !== 0) return false;
            }
        }
        return true;
    }

    difference(otherbitmap) {
        this.checkWasmReady();
        const newcount = Math.min(this.words.length, otherbitmap.words.length);
        for (let k = 0; k < newcount; ++k) {
            this.words[k] &= ~otherbitmap.words[k];
        }
        return this;
    }

    change(otherbitmap) {
        this.checkWasmReady();
        const newcount = Math.min(this.words.length, otherbitmap.words.length);
        for (let k = 0; k < newcount; ++k) {
            this.words[k] ^= otherbitmap.words[k];
        }
        if (newcount < otherbitmap.words.length) {
            this.resize((otherbitmap.words.length << 5) - 1);
            for (let k = newcount; k < otherbitmap.words.length; ++k) {
                this.words[k] = otherbitmap.words[k];
            }
        }
        return this;
    }

    new_union(otherbitmap) {
        this.checkWasmReady();
        const count = Math.max(this.words.length, otherbitmap.words.length);
        const answer = Object.create(FastBitSet.prototype);
        answer.words = HEAPU32.subarray(0, count);
        const mcount = Math.min(this.words.length, otherbitmap.words.length);
        for (let k = 0; k < mcount; ++k) {
            answer.words[k] = this.words[k] | otherbitmap.words[k];
        }
        if (mcount < this.words.length) {
            for (let k = mcount; k < this.words.length; ++k) {
                answer.words[k] = this.words[k];
            }
        } else {
            for (let k = mcount; k < otherbitmap.words.length; ++k) {
                answer.words[k] = otherbitmap.words[k];
            }
        }
        return answer;
    }

    checkWasmReady() {
        if (!wasmReady) {
            throw new Error('WASM module không sẵn sàng');
        }
    }

    kdbushRange(minX, minY, maxX, maxY) {
        return this.kdbush.range(minX, minY, maxX, maxY);
    }

    kdbushWithin(x, y, r) {
        return this.kdbush.within(x, y, r);
    }
}

module.exports = FastBitSet;
